import Math;
/*
A node that feeds resources to the network:
- Always coupled with a factory or generator
- Capable of answering requests for resources

*/
class FeederNode : LogisticNode{
    field resourceId;
    field availableStock;

    field setProduceMode; //True means this node is always producing

    field capacity = 1; //Total storage capacity for this node;

    field deliveryUnits = [];
    field unitsAwaitingDispatch = [];

    field source; //The factory or producer that feeds this node
    
    field network; //The LogisticNetwork this node belongs to

    constructor(x, y, resourceId, source, network) : base(x, y, []) { //Since the feeder will always lead into a network, 
    //there are no previous nodes
        this.resourceId = resourceId;
        this.availableStock = 0;

        this.source = source;
        
        this.network = network;
        this.network.addFeederNode(this);
    }

    function setCapacity(cap) {
        this.capacity = cap;
    }

    function getCapacity() {
        return this.capacity;
    }

    function getResourceId() {
        return this.resourceId;
    }

    function addStock(stock) {
        this.availableStock = Math.min(this.availableStock + stock, this.capacity);
    }

    function hasCapacityFor(stock) {
        return this.availableStock + stock <= this.capacity;
    }

    function takeStock(stock) { //Returns true if stock was successfully removed
        if (stock > this.availableStock) {
            return false;
        }
        this.availableStock -= stock;
        return true;
    }

    function hasStock(threshold = 1) {
        return this.availableStock >= threshold;
    }

    function placeRequest() {
        this.source.requestProduction();
    }

    function deliverUnit(unit) {
        this.deliveryUnits.add(unit);
        unit.home = this;
    }

    function removeFromDispatch(unit) {
        for(i = 0; i < this.unitsAwaitingDispatch.length; i++) {
            if(this.unitsAwaitingDispatch[i] == unit) {
                this.unitsAwaitingDispatch.remove(i);
                return;
            }
        }
    }

    function removeFromAvailable(unit) {
        for(i = 0; i < this.deliveryUnits.length; i++) {
            if(this.deliveryUnits[i] == unit) {
                this.deliveryUnits.remove(i);
                return;
            }
        }
    }

    
    function canDispatch() {
        return this.deliveryUnits.length > 0;
    }

    //Dispatches as many units as possible, filling as close to the amount as neccessary
    function dispatchTo(node, amount) {
        amountFilled = amount;
        route = this.generatePathTo(node);
        if(route == null) {
            return 0;
        }
        while (amountFilled > 0 && this.availableStock > 0 && this.deliveryUnits.length > 0) {
            //Send a delivery unit to the node, carrying as much loot as possible
            amountSent = Math.min(Math.min(amountFilled, this.availableStock), this.deliveryUnits[0].capacity);
            amountFilled -= amountSent;
            dispatchedUnit = this.deliveryUnits[0];
            dispatchedUnit.cargo = this.resourceId;
            dispatchedUnit.stock = amountSent;
            this.availableStock -= amountSent;
            this.removeFromAvailable(dispatchedUnit);
            dispatchedUnit.setRoute(route);
        }

        return amount - amountFilled;
    }

}