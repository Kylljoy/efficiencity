
class City {
    field logisticNetworks = [];

    constructor() {
        nodes = [];
        for(x = 0; x < 300; x += 30) {
            for(y = 0; y < 300; y += 30){
                nodes.add(new JunctionNode(x,y));
            }
        }
        this.logisticNetworks.add(new LogisticNetwork(nodes[0]));

        for(i = 1; i < 100; i++) {
            this.logisticNetworks[0].joinNodes(nodes[i], nodes[i - 1]);
            this.logisticNetworks[0].joinNodes(nodes[i - 1], nodes[i]);
            if(i > 11) {
                this.logisticNetworks[0].joinNodes(nodes[i], nodes[i - 10]);
                this.logisticNetworks[0].joinNodes(nodes[i - 10], nodes[i]);
            }
        }
        f = new Facility();
        f.productionTime = 5;
        f.yield = 10;
        feederNode = new FeederNode(330, 330, "shit", f, this.logisticNetworks[0]);
        f.outputNode = feederNode;
        //this.logisticNetworks[0].nodes[99].generatePathTo(this.logisticNetworks[0].nodes[0]);
        this.logisticNetworks[0].joinNodes(feederNode,nodes[-1]);
        this.logisticNetworks[0].joinNodes(nodes[-1], feederNode);
        feederNode.availableStock = 0;
        feederNode.capacity = 100;
        feederNode.deliverUnit(new Truck());
        feederNode.deliverUnit(new Truck());
        //x, y, resourceId, requestThreshold, network, consumer, chainedNode = null, previousNodes = []
        fact = new Factory();
        fact.yield = 30;
        fact.resourceId = "rock";
        consumerNode = new ConsumerNode(350, 350, "shit", 100, this.logisticNetworks[0], fact);
        outputNode = new FeederNode(360, 360, "rock", fact, this.logisticNetworks[0]);
        outputNode.deliverUnit(new Truck());
        outputNode.capacity = 30;
        fact.addInputNode(consumerNode);
        fact.setRecipe({"shit":10});
        fact.outputNode = outputNode;
        this.logisticNetworks[0].addBuilding(f);
        this.logisticNetworks[0].addBuilding(fact);
        requester = new ConsumerNode (370, 90, "rock", 10, this.logisticNetworks[0], null);
        this.logisticNetworks[0].joinNodes(nodes[90], requester);
        this.logisticNetworks[0].joinNodes(outputNode, nodes[95]);
        this.logisticNetworks[0].joinNodes(consumerNode, nodes[97]);
        this.logisticNetworks[0].joinNodes(nodes[97], consumerNode);
        requester.poll();
        
        

    }

    function tick() {
        for (network_ : this.logisticNetworks) {
            network_.tick();
        }
    }
}