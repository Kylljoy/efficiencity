
class City {
    field logisticNetworks = [];

    constructor() {
        nodes = [];
        for(x = 0; x < 300; x += 30) {
            for(y = 0; y < 300; y += 30){
                nodes.add(new JunctionNode(x,y));
            }
        }
        this.logisticNetworks.add(new LogisticNetwork(nodes[0]));

        for(i = 1; i < 100; i++) {
            this.logisticNetworks[0].joinNodes(nodes[i], nodes[i - 1]);
            this.logisticNetworks[0].joinNodes(nodes[i - 1], nodes[i]);
            if(i > 11) {
                this.logisticNetworks[0].joinNodes(nodes[i], nodes[i - 10]);
                this.logisticNetworks[0].joinNodes(nodes[i - 10], nodes[i]);
            }
        }
        f = new Facility();
        feederNode = new FeederNode(330, 330, "shit", f, this.logisticNetworks[0]);
        //this.logisticNetworks[0].nodes[99].generatePathTo(this.logisticNetworks[0].nodes[0]);
        this.logisticNetworks[0].joinNodes(feederNode,nodes[-1]);
        feederNode.availableStock = 100;
        feederNode.capacity = 100;
        randomUnit = new TransportUnit();
        randomUnit.speed = 3;
        randomUnit.capacity = 100;
        feederNode.deliverUnit(randomUnit);
        //x, y, resourceId, requestThreshold, network, consumer, chainedNode = null, previousNodes = []
        fact = new Factory();
        consumerNode = new ConsumerNode(0, 0, "shit", 10, this.logisticNetworks[0], fact);
        consumerNode.availableStock = 11;
        consumerNode.capacity = 15;
        this.logisticNetworks[0].joinNodes(nodes[0], consumerNode);
        consumerNode.takeStock(3);
        //print(consumerNode.availableStock);

    }

    function tick() {
        for (network_ : this.logisticNetworks) {
            network_.tick();
        }
    }
}