import Math;
import Graphics2D;

const MAX_PATHFINDING_ITERATION = 1000; //Maximum depth into the logistic network that A* will search

/*
An abstract node that exists on the logistic network
The node represents a junction or endpoint of the system
LogisticNodes may be linked together to create networks
Inbuilt methods to path from one node to another, and to merge nodes
*/
class LogisticNode {
    field previousNodes = [];
    field nextNodes = [];

    field nextPaths = [];
    field previousPaths = [];
    
    field x;
    field y;

    constructor(x, y, previousNodes = []) {
        this.previousNodes = previousNodes;
        this.x = x;
        this.y = y;
    }

    static function mergeNodes(nodeA, nodeB) {
        outputNode = new LogisticNode(nodeA.getX(), nodeA.getY());
        for(prevNode : nodeA.getPreviousNodes()) {
            outputNode.addPreviousNode(prevNode);
        }

        for(prevNode : nodeB.getPreviousNodes()) {
            if(!outputNode.previousNodes.contains(prevNode)) {
                outputNode.addPreviousNode(prevNode);
            }
        }

        for(nextNode : nodeA.getNextNodes()) {
            outputNode.addNextNode(nextNode);
        }

        for(nextNode : nodeB.getNextNodes()) {
            if(!outputNode.nextNodes.contains(nextNode)) {
                outputNode.addNextNode(nextNode);
            }
        }

        return outputNode;
    }

    function addPreviousNode(node) {
        if(!this.previousNodes.contains(node)) {
            //Add the node, and generate a pathway between them
            this.previousNodes.add(node);
            path = new LogisticPath(node, this);
            this.previousPaths.add(path);
            return path;
        }
        return null;
    }

    function removePreviousNode(node) {
        for(i = 0; i < this.previousNodes.length; i++) {
            if(this.previousNodes[i] == node) {
                this.removePreviousPathByNode(this.previousNodes[i]);
                this.previousNodes.remove(i);
                return;
            }
        }
    }

    function getPreviousNodes() {
        return this.previousNodes;
    }

    function addNextNode(node) {
        if(!this.nextNodes.contains(node)) {
            this.nextNodes.add(node);
            path = new LogisticPath(this, node);
            this.nextPaths.add(path);
            return path;
        }
    }

    function removeNextNode(node) {
        for(i = 0; i < this.nextNodes.length; i++) {
            if(this.nextNodes[i] == node) {
                this.removeNextPathByNode(this.nextNodes[i]);
                this.nextNodes.remove(i);
                return;
            }
        }
    }

    function getNextNodes() {
        return this.nextNodes;
    }

    //NEVER call this from outside the class, purely for internal usage
    function removePreviousPathByNode(node) {
        for(i = 0; i < this.previousPaths.length; i++) {
            if(this.previousPaths[i].start == node) {
                this.previousPaths.remove(i);
                return;
            }
        }
    }


    function getPreviousPaths() {
        return this.previousPaths;
    }

    //NEVER call this from outside the class, purely for internal usage
    function removeNextPathByNode(node) {
        for(i = 0; i < this.nextPaths.length; i++) {
            if(this.nextPaths[i].end == node) {
                this.nextPaths.remove(i);
                return;
            }
        }
    }

    function getNextPaths() {
        return this.nextPaths;
    }

    //Abstract function that just takes units in once they reach the end of their path
    //Returns true if accepted, false if otherwise
    function deliverUnit(unit) {
        return true;
    }

    function tick() {
        for (path__ : this.nextPaths) {
            path__.tick();
        }
    }


    function getX() {
        return this.x;
    }

    function getY() {
        return this.y;
    }
    
    

    //A* path generation
    //Generates the node-to-node pathway taken
    //TODO : Rewrite as recursive function
    function generateNodePathTo(node) {
        //Get the x and y values of the node
        nodeX = node.getX();
        nodeY = node.getY();

        //Generate a frontier based on the next nodes
        frontier = this.nextNodes.map((q)=>([q]));

        //Sort nodes by distance to target node
        frontier.sort((node_)=>((((nodeX - node_[0].getX())**2) + ((nodeY - node_[0].getY())**2))**0.5));

        path = [];

        for(iteration = 0; iteration < MAX_PATHFINDING_ITERATION; iteration++) { //While we are under the max iteration
            if (frontier.length < 1) {
                return null;
            }
            currentPath = frontier[0]; //Find the best path in the frontier [index 0 b/c we sorted it]
            frontier.remove(0); //Remove this path so we don't duplicate it.
            //If the path results in the desired node...
            if(currentPath[0] == node) {
                return currentPath[::-1]; //Return the path, we're done here
            }

            //Otherwise, generate a new list of paths and insert them where they belong.
            newPaths = currentPath[0].getNextNodes()
                .map((newNode_)=>
                ([newNode_] + currentPath));
            for(newPath : newPaths) {
                distance = (((nodeX - newPath[0].getX())**2) + ((nodeY - newPath[0].getY())**2))**0.5;
                //Binary insertion sort
                low = 0;
                high = frontier.length;
                while (low < high){
                    mid = (low + high) / 2;
                    
                    testNode_ = frontier[mid][0];
                    testDistance_ = (((nodeX - testNode_.getX())**2) + ((nodeY - testNode_.getY())**2))**0.5;
                    
                    if(distance > testDistance_) {
                        low = mid + 1;
                    } else if(distance < testDistance_) {
                        high = mid;
                    } else if (distance == testDistance_){
                        frontier.insert(mid, newPath);
                        break;
                    }
                }
                frontier.insert(mid, newPath);
            }
            
        }
        return null;
    }


    //Generates the pathway taken using physical LogisticPaths
    //TODO: Make A*
    function generatePathTo(node, visited = []) {
        //Get the x and y values of the node
        nodeX = node.getX();
        nodeY = node.getY();
        
        //Create a list of nodes that have been visited
        visitedNodes = visited + [this];

        //Generate a frontier based on the next paths
        frontier = this.getNextPaths();
        if(frontier.length == 0) {
            return null;
        }
        //Sort paths by distance from path endpoint to target node
        frontier.sort((path_)=>((((nodeX - path_.end.x) ** 2) + ((nodeY - path_.end.y) ** 2)) ** 0.5));
        for (path__ : frontier) {
            //Check if this path ends where we want it to
            if (path__.end == node) {
                return [path__];
            }
            //Check if this path has already been traversed
            if (visitedNodes.contains(path__.end)) {
                continue;
            }

            //Recursively parse the node tree
            recursionResult = path__.end.generatePathTo(node, visitedNodes);
            if (recursionResult == null) {
                continue;
            }
            return [path__] + recursionResult;
        }
        return null;
        
    }

    function draw() {
        Graphics2D.Draw.ellipse(((this.x - LogisticNetworkGraphics.X_OFFSET) * LogisticNetworkGraphics.SCALE) - (LogisticNetworkGraphics.NODE_SIZE_SCALED / 2), 
            ((this.y - LogisticNetworkGraphics.Y_OFFSET) * LogisticNetworkGraphics.SCALE) - (LogisticNetworkGraphics.NODE_SIZE_SCALED / 2), LogisticNetworkGraphics.NODE_SIZE_SCALED,
            LogisticNetworkGraphics.NODE_SIZE_SCALED, 0, 0, 0);
    }

    function hl() {
        Graphics2D.Draw.ellipse(((this.x - LogisticNetworkGraphics.X_OFFSET) * LogisticNetworkGraphics.SCALE) - (LogisticNetworkGraphics.NODE_SIZE_SCALED / 2), 
            ((this.y - LogisticNetworkGraphics.Y_OFFSET) * LogisticNetworkGraphics.SCALE) - (LogisticNetworkGraphics.NODE_SIZE_SCALED / 2), LogisticNetworkGraphics.NODE_SIZE_SCALED,
            LogisticNetworkGraphics.NODE_SIZE_SCALED, 150, 150, 0);
    }
    

    


}