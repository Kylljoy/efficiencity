import Math;
/*
A node that consumes resources from the network:
- Always coupled with a factory or consumer
- Origin of request for the system
*/

//TODO : Rewrite this class for accepting multiple resource types
class ConsumerNode : LogisticNode{
    field resourceId;
    field availableStock;

    field network; //The LogisticNetwork this node belongs to

    field activeRequests = false;

    field chainedNode = null; //Exists iff there is a node directly feeding this one

    field consumer; //The unit that utilizes resources delivered to this node

    field requestThreshold = 1; //The threshold at which the node will request more resources

    field capacity = 1;

    constructor(x, y, resourceId, requestThreshold, network, consumer, chainedNode = null, previousNodes = []) : base(x, y, previousNodes){
        this.resourceId = resourceId;
        this.availableStock = 0;
        this.network = network;
        this.requestThreshold = requestThreshold;
        this.consumer = consumer;

        this.chainedNode = null;
    }

    function setCapacity(cap) {
        this.capacity = cap;
    }

    function getCapacity() {
        return this.capacity;
    }

    function setRequestThreshold(threshold) {
        this.requestThreshold = threshold;
        if(this.availableStock < threshold) {
            //Make a logistic request, now that we are below a safe threshold
            if(this.chainedNode == null) {
                this.network.addRequest(this, this.resourceId, this.requestThreshold - this.availableStock + 1); //File a request with the network
            } else {
                this.chainedNode.requestProduction(); //File a request with the chained node
            }
        } 
    }

    function getResourceId(){
        return this.resourceId;
    }

    function deliverStock(stock) {
       this.availableStock = Math.min(this.availableStock + stock, this.capacity);
       if(this.availableStock >= this.requestThreshold) {
           this.consumer.nodeReady(this); //Notify the consuming factory that this node is full for production
           this.network.purgeRequestsFromNode(this);
       }
    }

    function hasCapacityFor(stock) {
        return this.capacity >= this.availableStock + stock;
    }

    function takeStock(stock) {
        if(stock < this.availableStock) {
            this.availableStock -= stock;
            if(this.availableStock < this.requestThreshold) {
                //Make a logistic request, now that we are below a safe threshold
                
                if(this.chainedNode == null) {
                    this.network.addRequest(this, this.resourceId, this.requestThreshold - this.availableStock + 1); //File a request with the network
                    //print("Issued request for "+this.resourceId );
                } else {
                    this.chainedNode.placeRequest(); //File a request with the chained node
                }
            }
            return true; //Taking stock was successful
        }
        return false; //Insufficeint stock to feed
    }

    function hasStock(threshold = 1) {
        return this.availableStock >= threshold;
    }

    function close() {
        //Safely close this node by closing any currently existing requests
        this.network.purgeRequestsFromNode(this);
    }

    function deliverUnit(unit) {
        if(unit.cargo == this.resourceId) {
            this.deliverStock(unit.stock);
            return true;
        } else {
            return false;
        }
    }

}