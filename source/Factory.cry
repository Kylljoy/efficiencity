/*
An intermediate "Factory" class 
A factory counsumes products from a consumerNode products and lead into a feederNode
*/
class Factory : Facility {

    /*field productionTime = 1; //The amount of ticks required to produce a unit of resource
    field currentProductionStage = 0; //The variable that represents how many ticks have passed since production
    field resourceId; //The id of the resource produced
    */

    field feederNodes = [];
    field recipe = {}; //Individual keys corresponding to 
    field productionRequests = 0;

    constructor() : base() {
        this.constantProduction = false;
        this.productionTime = 3;
    }

    function linkTo() {

    }

    function tick() {
        if (this.currentProductionStage == 0) {
            if (this.constantProduction || this.productionRequests > 0) {
                if (this.canProduce()) {
                    print("Production Started: " + this.yield + " " + this.resourceId);
                    this.consumeInputs();
                    this.currentProductionStage = 1;
                } else {
                    this.poll();
                }
            }
        } else {
            this.currentProductionStage++;
        }
        if (this.currentProductionStage >= this.productionTime) {
            this.currentProductionStage = 0;
            this.productionRequests--;
            this.outputNode.addStock(this.yield);
        }
    }

    function canProduce() {
        for (id : this.recipe.keys()) {
            canFulfill = false;
            for (node : this.feederNodes) {
                if (node.getResourceId() == id && node.hasStock(this.recipe[id])) {
                    canFulfill = true;
                }
            }
            if (!canFulfill) {
                return false;
            }
        }
        return true;
    }

    function consumeInputs() {
        for (id : this.recipe.keys()) {
            for (node : this.feederNodes) {
                if (node.getResourceId() == id && node.hasStock(this.recipe[id])) {
                   node.takeStock(this.recipe[id]);
                   break; 
                }
            }
        }
    }

    function poll() {
        if (!this.canProduce()) {
            for (node_ : this.feederNodes) {
                node_.poll();
            }
        }
    }

    function nodeReady(node) {
    }

    function setRecipe(recipe) {
        this.recipe = recipe;
        for (id : this.recipe.keys()) {
            for (node : this.feederNodes) {
                if (node.getResourceId() == id) {
                    node.setRequestThreshold(recipe[id]);
                }
            }
        }
    }

    function addInputNode(node) {
        this.feederNodes.add(node);
    }

    function requestProduction() {
        //print("Requested!");
        print("Production Request: " + this.yield + " " + this.resourceId);
        this.productionRequests++;
    }
}