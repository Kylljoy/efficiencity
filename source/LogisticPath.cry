import Math;
import Graphics2D;
/*
An abstract class that represents the physical path from one node to another
Every connection between LogisticNodes is represented as a path
Whereas nodes are a purely abstract form of linkage and transport, paths are the purely physical form
Created and modified solely by the LogisticNode class. No instantiation or attribution outside of that code, please
*/

class LogisticPath {
    field start;
    field end;

    field xVec = 0.0;
    field yVec = 0.0;

    field length;

    field units = []; //List of transport units, in order of merge
    field merging = null; //Transport unit attempting to merge into the next junction

    constructor(start, end) {
        this.start = start;
        this.end = end;
        this.xVec = end.x - start.x;
        this.yVec = end.y - start.y;      
        this.length = ((this.xVec ** 2.0) + (this.yVec ** 2.0)) ** 0.5;
        if (this.length != 0.0) {
            this.xVec /= this.length;
            this.yVec /= this.length;
        }
    }

    function setStartNode(node) {
        this.start = node;
    }

    function setEndNode(node) {
        this.end = node;
    }

    function addUnit(unit) {
        //print("Added unit");
        this.units.add(unit);
    }

    function markForMerge(unit) {
        this.merging = unit;
    }
    
    function mergeUnit(unit) {
        for(i = 0; i < this.merging.length; i++) {
            if(this.merging[i] == unit) { 
                this.merging.remove(i);
                return;
            }
        }
        this.purgeUnit(unit);
    }

    function purgeUnit(unit) {
        //print("Purged Unit");
        for(i = 0; i < this.units.length; i++) {
            if(this.units[i] == unit) { 
                this.units.remove(i);
                return;
            }
        }
    }

    function getUnits() {
        return this.units;
    }

    function getNumberOfUnits() {
        return this.units.length;
    }

    function getLastUnit() {
        return this.units[-1];
    }

    function isEmpty() {
        return this.units.length == 0;
    }
    

    function tick() {
        //Attempt to merge units into the junction
        if (this.merging != null) {
            //print("Merging!");
            if (this.end.deliverUnit(this.merging)) {
                this.merging = null;
            }
        }
        for (unit : this.units) {
            unit.tick();
        }
    }

    function getUnitAheadOf(unit) {
        for(i = 1; i < this.units.length - 1; i++) {
            if(this.units[i] == unit) { 
                return this.units[i - 1];
            }
        }
        return null;
    }

    function getNumberOfUnitsAheadOf(unit) {
        for(i = 0; i < this.units.length; i++) {
            if(this.units[i] == unit) { 
                return i;
            }
        }
        return this.units.length;
    }

    function draw() {
        start = this.start;
        end = this.end;

        Graphics2D.Draw.line((start.x - LogisticNetworkGraphics.X_OFFSET - (LogisticNetworkGraphics.PATH_OFFSET * this.yVec)) * LogisticNetworkGraphics.SCALE,
        (start.y - LogisticNetworkGraphics.Y_OFFSET + (LogisticNetworkGraphics.PATH_OFFSET * this.xVec)) * LogisticNetworkGraphics.SCALE,
        (end.x - LogisticNetworkGraphics.X_OFFSET  - (LogisticNetworkGraphics.PATH_OFFSET * this.yVec)) * LogisticNetworkGraphics.SCALE, 
        (end.y - LogisticNetworkGraphics.Y_OFFSET + (LogisticNetworkGraphics.PATH_OFFSET * this.xVec)) * LogisticNetworkGraphics.SCALE, LogisticNetworkGraphics.PATH_WIDTH_SCALED, 0, 0, 0);

        for (unit_ : this.units) {
            unit_.draw((start.x - LogisticNetworkGraphics.X_OFFSET - (LogisticNetworkGraphics.PATH_OFFSET * this.yVec)),
            (start.y - LogisticNetworkGraphics.Y_OFFSET + (LogisticNetworkGraphics.PATH_OFFSET * this.xVec)));
        }
    }

    function hl() {
        start = this.start;
        end = this.end;

        Graphics2D.Draw.line((start.x - LogisticNetworkGraphics.X_OFFSET - (LogisticNetworkGraphics.PATH_OFFSET * this.yVec)) * LogisticNetworkGraphics.SCALE,
        (start.y - LogisticNetworkGraphics.Y_OFFSET + (LogisticNetworkGraphics.PATH_OFFSET * this.xVec)) * LogisticNetworkGraphics.SCALE,
        (end.x - LogisticNetworkGraphics.X_OFFSET  - (LogisticNetworkGraphics.PATH_OFFSET * this.yVec)) * LogisticNetworkGraphics.SCALE, 
        (end.y - LogisticNetworkGraphics.Y_OFFSET + (LogisticNetworkGraphics.PATH_OFFSET * this.xVec)) * LogisticNetworkGraphics.SCALE, LogisticNetworkGraphics.PATH_WIDTH_SCALED, 150, 150, 0);
    }
}