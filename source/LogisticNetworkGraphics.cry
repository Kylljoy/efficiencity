import Graphics2D;

class LogisticNetworkGraphics {

    static field hlRoutes = [];
    static field hlNodes = [];


    static field X_OFFSET = -20;
    static field Y_OFFSET = -20;
    static field SCALE = 1.0;

    static field NODE_SIZE = 14;
    
    static field PATH_WIDTH = 2;
    static field PATH_OFFSET = 4;

    static field UNIT_WIDTH = 4;


    static field NODE_SIZE_SCALED = LogisticNetworkGraphics.NODE_SIZE * LogisticNetworkGraphics.SCALE;
    
    static field PATH_WIDTH_SCALED = LogisticNetworkGraphics.PATH_WIDTH * LogisticNetworkGraphics.SCALE;
    static field PATH_OFFSET_SCALED = LogisticNetworkGraphics.PATH_OFFSET * LogisticNetworkGraphics.SCALE;

    static function addHLRoute(route, time){
        LogisticNetworkGraphics.hlRoutes.add([route, time]);
    }

    static function highlightRoute(route) {
        for(path_ : route) {
             Graphics2D.Draw.line((path_.start.x - LogisticNetworkGraphics.X_OFFSET - (LogisticNetworkGraphics.PATH_OFFSET * path_.yVec)) * LogisticNetworkGraphics.SCALE,
                (path_.start.y - LogisticNetworkGraphics.Y_OFFSET + (LogisticNetworkGraphics.PATH_OFFSET * path_.xVec)) * LogisticNetworkGraphics.SCALE,
                (path_.end.x - LogisticNetworkGraphics.X_OFFSET  - (LogisticNetworkGraphics.PATH_OFFSET * path_.yVec)) * LogisticNetworkGraphics.SCALE, 
                (path_.end.y - LogisticNetworkGraphics.Y_OFFSET + (LogisticNetworkGraphics.PATH_OFFSET * path_.xVec)) * LogisticNetworkGraphics.SCALE,
                LogisticNetworkGraphics.PATH_WIDTH_SCALED, 150, 150, 0);

        }
    }

    static function highlightNetwork(network) {
        for(node_ : network.nodes) {
            node_.hl();
        }
        for(path_ : network.paths) {
            path_.hl();
        }
    }
    

    static function drawNetwork(network) {
        Graphics2D.Draw.fill(30, 120, 30);
        for(node_ : network.nodes) {
            node_.draw();
        }
        for(path_ : network.paths) {
            path_.draw();
        }
    }
    
    static function draw() {
        for (i = 0; i < LogisticNetworkGraphics.hlRoutes.length; i++) {
            LogisticNetworkGraphics.hlRoutes[i][1]--;
            LogisticNetworkGraphics.highlightRoute(LogisticNetworkGraphics.hlRoutes[i][0]);
            if (LogisticNetworkGraphics.hlRoutes[i][1] <= 0) {
                LogisticNetworkGraphics.hlRoutes.remove(i);
            }
        }
    }
    
}